/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "rtc.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"
#include "LoRa.h"
#include <stdio.h>
#include <string.h>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
uint8_t buf[30] = {0};
 char msg[25];
 char cmd[20];
 char test[10];
 char buffer[30];
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */
LoRa myLoRa;
/* USER CODE BEGIN PV */
/* USER CODE END PV */
struct __FILE {int handle;/* Add whatever you need here */};

FILE __stdout;
FILE __stdin;

int fputc(int ch, FILE *f)
{
  ITM_SendChar(ch);
  return(ch);
}

 void GSM()
 {
	 int count = 0;
	 sprintf(msg,"Checking Module...\r\n");
	   	HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),1000);
	   	uint8_t flag=1;
	 printf("inside GSM loop");

	   	while(flag){
	   		sprintf(cmd,"AT\r\n");
	   		HAL_UART_Transmit(&huart1,(uint8_t *)cmd,strlen(cmd),1000);
	   		HAL_UART_Receive_IT (&huart1, buf, 30);
	   		HAL_Delay(1000);
	   		if(strstr((char *)buf,"OK")){
	   			sprintf(msg,"Module Connected\r\n");
	   			HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),1000);
	   			flag=0;
	   		}
	   		HAL_Delay(1000);
	   		HAL_UART_Transmit(&huart2,(uint8_t *)buf,sizeof(buf),1000);
	   		memset(buf,0,sizeof(buf));
				count++;
				if(count >= 20)
				{
					break;
				}
	   	}
	   	flag = 1;
	   	sprintf(msg,"Sending Message\r\n");
	   	HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),1000);
	   	  	  	memset(buf,0,sizeof(buf));
	   	  HAL_Delay(5000);

	   	  /// IMP jst checking
	   	  memset(cmd,0,sizeof(cmd));
	   	char cmd_1[100];
	   	  sprintf(cmd_1,"AT+CMGF=1\r\n");
	   	  HAL_UART_Transmit(&huart1,(uint8_t *)cmd_1,strlen(cmd),1000);
	   	  HAL_UART_Receive_IT (&huart1, buf, 30);
	   	sprintf(cmd,"AT+CMGF=1\r\n");
	   	HAL_UART_Transmit(&huart1,(uint8_t *)cmd,strlen(cmd),1000);
	   	HAL_UART_Receive_IT (&huart1, buf, 30);
	   	HAL_Delay(1000);
	   	    HAL_Delay(500);
	     	memset(msg,0,sizeof(msg));
	     	char msg_1[100];
		   //	char msg_2[100];
		    //	sprintf(msg_2,"AT+CREG?\r\n");
	   	  //	HAL_UART_Transmit(&huart1,(uint8_t *)msg_2,strlen(msg_2),1000);
	   	 // 	HAL_Delay(500);
	   	  //	HAL_UART_Receive_IT (&huart1, buf, 30);
	   	  	//HAL_Delay(1000);
					char msg_3[50];
		    	sprintf(msg_3,"AT+CMEE=1\r\n");
	   	  	HAL_UART_Transmit(&huart1,(uint8_t *)msg_3,strlen(msg_3),1000);
	   	    HAL_Delay(500);
	   	  	HAL_UART_Receive_IT (&huart1, buf, 30);
	   	  	HAL_Delay(1000);
	      	sprintf(msg_1,"AT+CMGS=\"+919369691952\"\r\n");
	   	  	HAL_UART_Transmit(&huart1,(uint8_t *)msg_1,strlen(msg_1),1000);

	   	  	HAL_Delay(500);
	   	  	HAL_UART_Receive_IT (&huart1, buf, 30);
	   	  	HAL_Delay(1000);
	   	  	HAL_UART_Transmit(&huart2,(uint8_t *)buf,sizeof(buf),1000);
	   	  	memset(buf,0,sizeof(buf));
	   	memset(cmd,0,sizeof(cmd));
	   	HAL_Delay(500);
	   	sprintf(cmd,"Hello from Sim808 %c",0x1a);
	   	HAL_UART_Transmit(&huart1,(uint8_t *)cmd,strlen(cmd),1000);
	   	HAL_Delay(500);
	   	HAL_Delay(1000);
	   	HAL_UART_Receive_IT (&huart1, buf, 30);

	     HAL_Delay(500);
	   	HAL_UART_Transmit(&huart2,(uint8_t *)buf,sizeof(buf),1000);
	   	HAL_Delay(500);
	   	sprintf(msg,"Message Sent\r\n");
	   	HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),1000); 
			printf("Message Sent\r\n");
 }
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
 uint8_t RxBuffer[128];
// uint8_t packet_size = 0;
 uint8_t counter = 0;
 char* str;
 char* ack = "/OK/";
 char* p;
 char date[40];
 char time[40];
 uint8_t sec;
 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;
  int prev_min = 0;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
  MX_USART1_UART_Init();
  MX_RTC_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
	myLoRa = newLoRa();
myLoRa.CS_port         = NSS_GPIO_Port;
myLoRa.CS_pin          = NSS_Pin;
myLoRa.reset_port      = RST_GPIO_Port;
myLoRa.reset_pin       = RST_Pin;
myLoRa.DIO0_port       = DIO0_GPIO_Port;
myLoRa.DIO0_pin        = DIO0_Pin;
myLoRa.hSPIx           = &hspi1;

myLoRa.frequency             = 433;             // default = 433 MHz
myLoRa.spredingFactor        = SF_7;            // default = SF_7
myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
myLoRa.power                 = POWER_14db;      // default = 20db
myLoRa.overCurrentProtection = 130;             // default = 100 mA
myLoRa.preamble              = 8;              // default = 8;
	
LoRa_startReceiving(&myLoRa);
uint8_t TxBuffer[128];
TxBuffer[0]=45;
TxBuffer[1]=0x12;
TxBuffer[2]='G';
  /* USER CODE END 2 */
char* send_data ="OKAY";
char* send_data_1 ="Sensor Readings";
uint16_t LoRa_status = LoRa_init(&myLoRa);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
uint8_t received_data[128]="";
 uint8_t packet_size = 0;
//uint16_t counter = 0;

				  while (1)
  {
		uint8_t min;
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
	  HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
		min = sTime.Minutes;
		int min_int = (int) min;

		if(min_int%2 ){
			int flg = min_int - prev_min;
			printf("prev min is %d  mim is %d", prev_min,min_int);
			if(flg != 0){
		if (LoRa_status==LORA_OK){
  printf("\n\r LoRa is running... :) \n\r");
		printf("Inital handshaking mesage sent is %s \n",send_data);
		LoRa_transmit(&myLoRa, (uint8_t*)send_data,sizeof(send_data), 1000);
		HAL_Delay(2000);	
    packet_size=0;
	
		HAL_Delay(500);
			int t=6;
			if(t>0){
				packet_size = LoRa_receive(&myLoRa, received_data, 128);
		if(packet_size>0 ){
			
			//counter++;
	 printf("\n\r RECIEVED \n\r : %d \n\r", packet_size);
    printf("the data received is %s \n",(char *)received_data);
			memset(received_data,0,sizeof(received_data));
			printf("message sent at %d hours %d mins %d secs\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
			//flg = 1;
			prev_min = min_int;
	//	printf("the data received is %s \n\r",received_data);
		packet_size=0;
	//	p = strstr(str,ack);
			HAL_Delay(1000);
			
			}
		HAL_Delay(1000);
		t--;
		}
		
		else
		{
			printf("GSM needed\n");
			GSM();
			printf("sensor readings published using sms\n");
				printf("message sent at %d hours %d mins %d secs\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
			//flg = 1;
			prev_min = min_int;
			
		}
		
			/*
			if(p)
			{
				printf("GSM Not Needed");
				LoRa_transmit(&myLoRa,(uint8_t *)send_data,strlen(send_data),100);
				printf("message transmitted");
			//	GSM();
		}
			else
			{
				printf("GSM  Needed");
				//GSM();
				LoRa_transmit(&myLoRa,(uint8_t *)send_data,strlen(send_data),100);
				printf("message transmitted");
			}
			
		*/
	}
	
 
		else{
  printf("\n\r LoRa failed :( \n\r Error code: %d \n\r", LoRa_status);
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
		HAL_Delay(500);
		}
	}
/*
}

	 LoRa_transmit(&myLoRa, (uint8_t*)send_data, 120, 1000);
	HAL_Delay(1000);
	HAL_Delay(500);
}
	*/	
	}
}
}


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  
  /* USER CODE END 3 */

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(PVD_IRQn);
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
